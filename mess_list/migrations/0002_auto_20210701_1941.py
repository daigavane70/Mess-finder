# Generated by Django 3.1.7 on 2021-07-01 14:11

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import phone_field.models


class Migration(migrations.Migration):

    dependencies = [
        ('mess_list', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Customers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('email_id', models.EmailField(help_text='enter email id', max_length=254, unique=True)),
                ('phoneno', phone_field.models.PhoneField(help_text='Mobile no', max_length=31)),
                ('gender', models.CharField(help_text='You can write whatever you want:)', max_length=56)),
            ],
        ),
        migrations.RemoveField(
            model_name='owner',
            name='name',
        ),
        migrations.AddField(
            model_name='mess',
            name='city',
            field=models.CharField(default='None', max_length=100),
        ),
        migrations.AddField(
            model_name='mess',
            name='pincode',
            field=models.IntegerField(blank=True, default=431001, null=True, validators=[django.core.validators.MinValueValidator(100000), django.core.validators.MaxValueValidator(999999)]),
        ),
        migrations.AddField(
            model_name='mess',
            name='street',
            field=models.CharField(default='None', max_length=100),
        ),
        migrations.AddField(
            model_name='owner',
            name='email_id',
            field=models.EmailField(default='None', help_text='enter email id', max_length=254, unique=True),
        ),
        migrations.AddField(
            model_name='owner',
            name='first_name',
            field=models.CharField(default='None', max_length=100),
        ),
        migrations.AddField(
            model_name='owner',
            name='last_name',
            field=models.CharField(blank=True, default='None', max_length=100),
        ),
        migrations.AddField(
            model_name='owner',
            name='phoneno',
            field=phone_field.models.PhoneField(default=django.utils.timezone.now, help_text='Mobile no', max_length=31),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='mess',
            name='cuisine_type',
            field=models.CharField(default='None', max_length=150),
        ),
        migrations.AlterField(
            model_name='mess',
            name='name',
            field=models.CharField(default='None', max_length=100),
        ),
        migrations.AlterField(
            model_name='mess',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='mess_list.owner'),
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('review', models.CharField(max_length=1000)),
                ('rating', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mess_list.customers')),
                ('mess', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mess_list.mess')),
            ],
        ),
        migrations.CreateModel(
            name='MessImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('images', models.FileField(upload_to='images/')),
                ('mess', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mess_list.mess')),
            ],
        ),
    ]
